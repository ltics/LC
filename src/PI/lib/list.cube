List :: * → *;
List e = ∀ (listT :: *) . listT → (e → listT → listT) → listT;

Nil :: ∀ (e :: *) . List e;
Nil e = λ (listT :: *) (nil :: listT) (cons :: e→ listT → listT) → nil;

Cons :: ∀ (e :: *) . e → List e → List e;
Cons e x xs = λ (listT :: *) (nil :: listT) (cons :: e→ listT → listT) → cons x (xs listT nil cons);

foldr :: ∀ (a :: *) (b :: *) . (a → b → b) → b → List a → b;
foldr a b f z xs = xs b z f;

foldl :: ∀ (a :: *) (b :: *) . (b → a → b) → b → List a → b;
foldl a b f z xs = foldr a (b → b) (λ (x :: a) (g :: b → b) (v :: b) → g (f v x)) (λ (x :: b) → x) xs z;

map :: ∀ (a :: *) (b :: *) . (a → b) → List a → List b;
map a b f xs = foldr a (List b) (λ (x :: a) (r :: List b) → Cons b (f x) r) (Nil b) xs;

append :: ∀ (a :: *) . List a → List a → List a;
append a xs ys = foldr a (List a) (Cons a) ys xs;

reverse :: ∀ (a :: *) . List a → List a;
reverse a xs = foldl a (List a) (λ (r :: List a) (x :: a) → Cons a x r) (Nil a) xs;
